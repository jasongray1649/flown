#this program takes an input of 1s and 0s, then a row-separator character of your choice, which may not be 0, 1, 0x00 or 0xFF (newline is a good choice). It outputs infinitely many rows of 0x00 and 0xFF characters, separated by your specified row-separator, in accordance with rule 124, the horizontal reflection of rule 110 (see https://mathworld.wolfram.com/Rule110.html )

#rule 124, the horizontal reflection of rule 110 (and thus, is bounded on the lefthand side):
#111: 0
#011: 1
#101: 1
#001: 0
#110: 1
#010: 1
#100: 1
#000: 0
#For more information, see https://mathworld.wolfram.com/Rule110.html and https://en.wikipedia.org/wiki/Rule_110#Interesting_properties

#The internal encoding ("complex characters") is not as svelte as ideal, since we need to have an explicit end-of-the-universe marker that expands to the right at lightspeed for easy printing... otherwise we'd never know when to stop printing any given row of the automaton. At least the tape is full of 0s to start with, so we don't need to explicitly populate the eou.
# Internal symbol encoding:
#blank blank: end-of-the-universe mark (eou)
#eof eof: 1
#eof blank: 0
# I could use blank eof for an invalidated/old eou (I might have to introduce bou notation again, so the first pass of the internally-encoded process doesn't need to have special logic ðŸ¤”), but I'll probably just use eof eof for convenience (I can always crush a complex cell into an eof eof). And that means I'll have to change the encoding of 1...
## TODO: Proposed new encoding: eou: blank blank ; 0: blank eof (this also helps bc the eof counts as 0 in rule 124 so we can just check the first cell maybe) ; 1: eof blank ; bou: eof eof (don't overwrite cells directly, but 1 behind, so the next cell will have information enough to complete its print) #this would require modifying almost all of the program, but may be necessary for continuing.
# The external encoding is just printing blank for 0 and eof for 1, also the user-supplied separator for the user-supplied separator, which is like encoding the eou.

#read in the input (until a non-1-or-0 separator character is found)
10 in
11 out #debugging statement
#check it
20 if 0
21 go 30
22 if 1
23 go 30
25 go 100 # we found the separator, move on!
# advance input loop
30 right
31 go 10

#translate the input
#go back to the left edge
100 left
110 if eof
111 go 200
112 go 100
200 right # get on the first of the remaining input
210 if 1
220 go 300
230 if 0
240 go 400
250 go 500

300 # we've read a 1
310 in #overwrite to keep our place for next time
#go right until the eou, making sure to skip over blanks in the 0-complexes
320 right
321 if blank
322 go 350 #this is the eou, we're on the first cell of its two-cell complex
330 if eof #non-eou complex
331 right
332 go 320 #non-eou non-complex, so we'll just skip one, like regular

350 in #we found eou, write a 1 (eof eof)
351 right
352 in

360 go 800
 
400 #we've read a 0
410 in #overwrite to keep our place for next time
#go right until the eou, making sure to skip over blanks in the 0-complexes
420 right
421 if blank
422 go 450 #this is the eou, we're on the first cell of its two-cell complex
430 if eof #non-eou complex
431 right
432 go 420 #non-eou non-complex, so we'll just skip one, like regular

450 in #we found eou, write a 0 (eof blank)
451 right
452 #blank

460 go 800

#we've read the newline... that means we're done translating
500 right #advance on to first complex character
501 go 1000 #print first line

800 left
801 if eof
802 go 800
803 if blank
804 go 800
#we must be at the separator
#check if we've already translated every character
820 go 100

#print the line, (if you're on the first complex character of the line)
1000 if blank
1010 go 1110 #we hit the eou, so we must go back on the tape to print sep
1011 right
1012 out #this will be blank for 0 and eof for 1
1013 right
1020 go 1000 #loop

#go back to the sep and print the sep
1110 left
1120 if eof
1121 go 1110
1130 if blank
1131 go 1110
1140 out #we must have reached the sep here.

#I guess we exit then lol

#TODO: iterate forever, baby!
